generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id                   String                     @id @default(cuid())
  code                 String                     @unique
  name                 String
  flagEmoji            String?
  currencyCode         String?
  currencySymbol       String?
  brandName            String?
  tagline              String?
  marketContext        String?
  createdAt            DateTime                   @default(now())
  isActive             Boolean                    @default(true)
  updatedAt            DateTime                   @default(now())
  flexibleOptions      FlexibleOption[]
  packageCountryPrices PackageCountryPrice[]
  packageOfferPrices   PackageOfferCountryPrice[]
  paymentMethods       PaymentMethod[]
  platformStats        PlatformStat[]
  pricingPlans         PricingPlan[]
  quickPurchases       QuickPurchase[]
  testimonials         Testimonial[]
  users                User[]
}

model PaymentMethod {
  id        String  @id @default(cuid())
  countryId String
  name      String
  type      String?
  isActive  Boolean @default(true)
  sortOrder Int     @default(0)
  country   Country @relation(fields: [countryId], references: [id])
}

model PricingPlan {
  id            String   @id @default(cuid())
  countryId     String
  planType      String
  name          String
  priceAmount   Decimal
  originalPrice Decimal?
  billingPeriod String
  description   String?
  isPopular     Boolean  @default(false)
  isActive      Boolean  @default(true)
  features      Json?
  createdAt     DateTime @default(now())
  country       Country  @relation(fields: [countryId], references: [id])
}

model FlexibleOption {
  id          String  @id @default(cuid())
  countryId   String
  name        String
  priceAmount Decimal
  description String?
  category    String
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  country     Country @relation(fields: [countryId], references: [id])
}

model QuickPurchase {
  id                 String     @id @default(cuid())
  name               String
  price              Decimal
  originalPrice      Decimal?
  description        String
  features           String[]
  type               String
  iconName           String
  colorGradientFrom  String
  colorGradientTo    String
  isUrgent           Boolean    @default(false)
  timeLeft           String?
  isPopular          Boolean    @default(false)
  discountPercentage Int?
  isActive           Boolean    @default(true)
  displayOrder       Int        @default(0)
  targetLink         String?
  countryId          String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  analysisSummary    String?
  confidenceScore    Int?
  isPredictionActive Boolean    @default(true)
  matchData          Json?
  matchId            String?    @unique
  odds               Decimal?
  predictionData     Json?
  predictionType     String?
  valueRating        String?
  purchases          Purchase[]
  country            Country    @relation(fields: [countryId], references: [id])
}

model League {
  id                      String    @id @default(cuid())
  name                    String    @unique
  countryCode             String?
  sport                   String    @default("football")
  isActive                Boolean   @default(true)
  logoUrl                 String?
  createdAt               DateTime  @default(now())
  dataCollectionPriority  Int       @default(0)
  externalLeagueId        String?
  isDataCollectionEnabled Boolean   @default(true)
  isPredictionEnabled     Boolean   @default(true)
  lastDataSync            DateTime?
  matchLimit              Int       @default(10)
  syncFrequency           String    @default("daily")
  updatedAt               DateTime  @updatedAt
  matches                 Match[]
  teams                   Team[]

  @@index([isDataCollectionEnabled, dataCollectionPriority])
  @@index([externalLeagueId])
}

model Team {
  id          String  @id @default(cuid())
  name        String
  leagueId    String
  logoUrl     String?
  isActive    Boolean @default(true)
  awayMatches Match[] @relation("AwayTeam")
  homeMatches Match[] @relation("HomeTeam")
  league      League  @relation(fields: [leagueId], references: [id])

  @@unique([name, leagueId])
}

model Match {
  id           String       @id @default(cuid())
  homeTeamId   String
  awayTeamId   String
  leagueId     String
  matchDate    DateTime
  status       String       @default("scheduled")
  homeScore    Int?
  awayScore    Int?
  minutePlayed Int?
  createdAt    DateTime     @default(now())
  awayTeam     Team         @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam     Team         @relation("HomeTeam", fields: [homeTeamId], references: [id])
  league       League       @relation(fields: [leagueId], references: [id])
  predictions  Prediction[]

  @@index([matchDate, status])
  @@index([homeTeamId, awayTeamId])
  @@index([leagueId, matchDate])
  @@index([status, matchDate])
}

model Prediction {
  id                   String           @id @default(cuid())
  matchId              String
  predictionType       String
  confidenceScore      Int              @db.SmallInt
  odds                 Decimal
  valueRating          String
  explanation          String?
  isFree               Boolean          @default(true)
  isFeatured           Boolean          @default(false)
  status               String           @default("pending")
  createdAt            DateTime         @default(now())
  resultUpdatedAt      DateTime?
  matchesInAccumulator Json?
  potentialReturn      Decimal?
  showInDailyTips      Boolean          @default(true)
  showInWeeklySpecials Boolean          @default(false)
  stake                Decimal?
  totalOdds            Decimal?
  type                 String           @default("single")
  creditTipClaims      CreditTipClaim[]
  match                Match            @relation(fields: [matchId], references: [id])
  userPackageTips      UserPackageTip[]
  userPredictions      UserPrediction[]

  @@index([isFree, showInDailyTips, status])
  @@index([confidenceScore, valueRating, createdAt])
  @@index([matchId, status])
  @@index([createdAt])
}

model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  createdAt             DateTime            @default(now())
  password              String
  role                  String              @default("user")
  countryId             String?
  fullName              String?
  isActive              Boolean             @default(true)
  lastLoginAt           DateTime?
  phone                 String?
  subscriptionExpiresAt DateTime?
  subscriptionPlan      String?
  totalWinnings         Decimal             @default(0)
  winStreak             Int                 @default(0)
  totalReferralEarnings Decimal             @default(0)
  totalReferrals        Int                 @default(0)
  predictionCredits     Int                 @default(0)
  emailNotifications    Boolean             @default(true)
  pushNotifications     Boolean             @default(true)
  inAppNotifications    Boolean             @default(true)
  notificationSettings  Json?
  
  // Email verification fields
  emailVerified         Boolean             @default(false)
  emailVerificationToken String?            @unique
  emailVerificationExpires DateTime?
  
  // Password reset fields
  passwordResetToken    String?             @unique
  passwordResetExpires  DateTime?
  
  totalCreditsEarned    Int                 @default(0)
  totalCreditsSpent     Int                 @default(0)
  chatMessages          ChatMessage[]
  creditTipClaims       CreditTipClaim[]
  creditTransactions    CreditTransaction[]
  leaderboardEntries    LeaderboardEntry[]
  packagePurchases      PackagePurchase[]
  PointTransaction      PointTransaction[]
  purchases             Purchase[]
  quizParticipations    QuizParticipation[]
  referralsReceived     Referral[]          @relation("Referred")
  referralsGiven        Referral[]          @relation("Referrer")
  referralCodes         ReferralCode[]
  tipUsages             TipUsage[]
  country               Country?            @relation(fields: [countryId], references: [id])
  notifications         UserNotification[]
  userPackages          UserPackage[]
  userPoints            UserPoints?
  userPredictions       UserPrediction[]
  quizSessions          QuizSession[]
  supportTickets        SupportTicket[]
  supportTicketResponses SupportTicketResponse[]
  breakingNews          BreakingNews[]
}

model UserPrediction {
  id              String     @id @default(cuid())
  userId          String
  predictionId    String
  stakeAmount     Decimal
  potentialReturn Decimal
  actualReturn    Decimal?
  status          String
  placedAt        DateTime   @default(now())
  prediction      Prediction @relation(fields: [predictionId], references: [id])
  user            User       @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([predictionId, userId])
  @@index([placedAt])
  @@index([status, placedAt])
}

model Referral {
  id                  String             @id @default(cuid())
  referrerId          String
  referredId          String?
  referralCode        String
  commissionAmount    Decimal            @default(0)
  status              String             @default("pending") // pending, completed, expired
  createdAt           DateTime           @default(now())
  completedAt         DateTime?
  expiresAt           DateTime           @default(dbgenerated("(NOW() + INTERVAL '30 days')"))
  packageRewardId     String?
  pointsEarned        Int                @default(0)
  creditsEarned       Int                @default(0)
  quizParticipationId String?
  referralType        String             @default("quiz")
  metadata            Json?              // Store additional referral data
  packageReward       PackageOffer?      @relation(fields: [packageRewardId], references: [id])
  quizParticipation   QuizParticipation? @relation(fields: [quizParticipationId], references: [id])
  referred            User?              @relation("Referred", fields: [referredId], references: [id])
  referrer            User               @relation("Referrer", fields: [referrerId], references: [id])
  referralCodeRef     ReferralCode       @relation(fields: [referralCode], references: [code])
  quizSessions        QuizSession[]

  @@index([referrerId, status])
  @@index([referralType])
  @@index([createdAt])
  @@index([referralCode])
  @@index([expiresAt])
}

model ReferralCode {
  id          String   @id @default(cuid())
  userId      String   @unique
  code        String   @unique // e.g., "IADPRM50"
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  maxUsage    Int?     // null for unlimited
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  referrals   Referral[]

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
}

model QuizParticipation {
  id                String       @id @default(cuid())
  userId            String?
  email             String
  phone             String?
  fullName          String
  bettingExperience String
  totalScore        Int          @default(0)
  questionsAnswered Int          @default(0)
  correctAnswers    Int          @default(0)
  referralCode      String?
  participatedAt    DateTime     @default(now())
  isCompleted       Boolean      @default(false)
  countryCode       String?
  ipAddress         String?
  userAgent         String?
  bonusPoints       Int          @default(0)
  creditsClaimed    Boolean      @default(false)
  claimedAt         DateTime?
  quizReferralCode  String?
  referralBonus     Int          @default(0)
  quizAnswers       QuizAnswer[]
  user              User?        @relation(fields: [userId], references: [id])
  referrals         Referral[]

  @@index([email])
  @@index([referralCode])
  @@index([quizReferralCode])
  @@index([participatedAt])
  @@index([bettingExperience])
  @@index([creditsClaimed])
}

model QuizQuestion {
  id            String       @id @default(cuid())
  question      String
  correctAnswer String
  options       String[]
  category      String
  difficulty    String       @default("medium")
  points        Int          @default(10)
  isActive      Boolean      @default(true)
  weekNumber    Int?
  createdAt     DateTime     @default(now())
  quizAnswers   QuizAnswer[]

  @@index([category])
  @@index([weekNumber])
  @@index([isActive])
}

model QuizAnswer {
  id                  String            @id @default(cuid())
  quizParticipationId String
  quizQuestionId      String
  selectedAnswer      String
  isCorrect           Boolean
  pointsEarned        Int               @default(0)
  answeredAt          DateTime          @default(now())
  quizParticipation   QuizParticipation @relation(fields: [quizParticipationId], references: [id])
  quizQuestion        QuizQuestion      @relation(fields: [quizQuestionId], references: [id])

  @@unique([quizParticipationId, quizQuestionId])
  @@index([isCorrect])
}

model UserPoints {
  id                String             @id @default(cuid())
  userId            String             @unique
  points            Int                @default(0)
  totalEarned       Int                @default(0)
  totalSpent        Int                @default(0)
  lastUpdated       DateTime           @default(now())
  pointTransactions PointTransaction[]
  user              User               @relation(fields: [userId], references: [id])

  @@index([points])
}

model PointTransaction {
  id           String     @id @default(cuid())
  userPointsId String
  amount       Int
  type         String
  description  String
  createdAt    DateTime   @default(now())
  metadata     Json?
  reference    String?
  userId       String
  User         User       @relation(fields: [userId], references: [id])
  userPoints   UserPoints @relation(fields: [userPointsId], references: [id])

  @@index([type])
  @@index([createdAt])
  @@index([userId])
}

model ReferralReward {
  id             String        @id @default(cuid())
  name           String
  description    String
  type           String
  value          Int
  packageOfferId String?
  minReferrals   Int           @default(1)
  maxReferrals   Int?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  packageOffer   PackageOffer? @relation(fields: [packageOfferId], references: [id])

  @@index([type])
  @@index([isActive])
}

model WeeklyLeaderboard {
  id                 String             @id @default(cuid())
  weekNumber         Int
  year               Int
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  leaderboardEntries LeaderboardEntry[]

  @@unique([weekNumber, year])
  @@index([isActive])
}

model LeaderboardEntry {
  id                  String            @id @default(cuid())
  weeklyLeaderboardId String
  userId              String
  totalPoints         Int               @default(0)
  quizScore           Int               @default(0)
  referralPoints      Int               @default(0)
  rank                Int?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [userId], references: [id])
  weeklyLeaderboard   WeeklyLeaderboard @relation(fields: [weeklyLeaderboardId], references: [id])

  @@unique([weeklyLeaderboardId, userId])
  @@index([totalPoints])
  @@index([rank])
}

model PlatformStat {
  id                    String   @id @default(cuid())
  statDate              DateTime
  countryId             String
  totalUsers            Int      @default(0)
  activeUsers           Int      @default(0)
  vipUsers              Int      @default(0)
  totalPredictions      Int      @default(0)
  successfulPredictions Int      @default(0)
  revenueAmount         Decimal  @default(0)
  createdAt             DateTime @default(now())
  country               Country  @relation(fields: [countryId], references: [id])
}

model Testimonial {
  id              String   @id @default(cuid())
  userName        String
  countryId       String
  rating          Int      @db.SmallInt
  testimonialText String
  profitAmount    String
  timeframe       String
  isFeatured      Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  country         Country  @relation(fields: [countryId], references: [id])
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isVipUser Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserNotification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  message     String
  type        String
  category    String
  isRead      Boolean   @default(false)
  isEmailSent Boolean   @default(false)
  isPushSent  Boolean   @default(false)
  metadata    Json?
  actionUrl   String?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  readAt      DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, type])
  @@index([userId, category])
  @@index([createdAt])
  @@index([expiresAt])
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  title       String
  message     String
  type        String
  category    String
  isActive    Boolean  @default(true)
  variables   String[]
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmailTemplate {
  id          String                 @id @default(cuid())
  name        String
  slug        String                 @unique
  subject     String
  htmlContent String
  textContent String?
  category    String
  isActive    Boolean                @default(true)
  version     Int                    @default(1)
  variables   Json?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  createdBy   String
  description String?
  emailLogs   EmailLog[]
  versions    EmailTemplateVersion[]

  @@index([category, isActive])
  @@index([slug])
}

model EmailTemplateVersion {
  id          String        @id @default(cuid())
  templateId  String
  version     Int
  htmlContent String
  textContent String?
  subject     String
  variables   Json?
  createdAt   DateTime      @default(now())
  createdBy   String
  template    EmailTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, version])
}

model EmailLog {
  id           String        @id @default(cuid())
  templateId   String
  recipient    String
  subject      String
  status       String
  sentAt       DateTime      @default(now())
  errorMessage String?
  metadata     Json?
  template     EmailTemplate @relation(fields: [templateId], references: [id])

  @@index([templateId, status])
  @@index([sentAt])
}

model SystemHealth {
  id                String   @id @default(cuid())
  serverStatus      String
  apiResponseTime   Int
  databaseStatus    String
  errorRate         Float
  activeConnections Int
  cpuUsage          Float
  memoryUsage       Float
  diskUsage         Float
  lastCheckedAt     DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PackageCountryPrice {
  id            String   @id @default(cuid())
  countryId     String
  packageType   String
  price         Decimal
  originalPrice Decimal?
  country       Country  @relation(fields: [countryId], references: [id])

  @@unique([countryId, packageType])
}

model Purchase {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  userId          String
  amount          Decimal
  paymentMethod   String
  status          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  quickPurchaseId String
  quickPurchase   QuickPurchase @relation(fields: [quickPurchaseId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([quickPurchaseId])
}

model PackagePurchase {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  userId         String
  amount         Decimal
  paymentMethod  String
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  packageOfferId String?
  packageType    String
  countryId      String?
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([packageOfferId])
  @@index([packageType, countryId])
}

model PackageOffer {
  id                String                     @id @default(cuid())
  name              String
  packageType       String
  description       String
  tipCount          Int
  validityDays      Int
  isActive          Boolean                    @default(true)
  displayOrder      Int                        @default(0)
  features          String[]
  iconName          String                     @default("Gift")
  colorGradientFrom String                     @default("#8B5CF6")
  colorGradientTo   String                     @default("#EC4899")
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  countryPrices     PackageOfferCountryPrice[]
  referrals         Referral[]
  referralRewards   ReferralReward[]
  userPackages      UserPackage[]
}

model PackageOfferCountryPrice {
  id             String       @id @default(cuid())
  packageOfferId String
  countryId      String
  price          Decimal
  originalPrice  Decimal?
  currencyCode   String
  currencySymbol String
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  country        Country      @relation(fields: [countryId], references: [id])
  packageOffer   PackageOffer @relation(fields: [packageOfferId], references: [id])

  @@unique([packageOfferId, countryId])
}

model UserPackage {
  id             String           @id @default(cuid())
  userId         String
  packageOfferId String
  purchasedAt    DateTime         @default(now())
  expiresAt      DateTime
  tipsRemaining  Int
  totalTips      Int
  status         String           @default("active")
  pricePaid      Decimal
  currencyCode   String
  currencySymbol String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  packageOffer   PackageOffer     @relation(fields: [packageOfferId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  claimedTips    UserPackageTip[]

  @@index([userId, status])
  @@index([expiresAt])
}

model UserPackageTip {
  id              String      @id @default(cuid())
  userPackageId   String
  predictionId    String
  claimedAt       DateTime    @default(now())
  expiresAt       DateTime?
  notes           String?
  status          String      @default("claimed")
  usedAt          DateTime?
  auditLog        Json?
  performance     Json?
  result          String?
  resultUpdatedAt DateTime?
  tipUsage        TipUsage?
  prediction      Prediction  @relation(fields: [predictionId], references: [id])
  userPackage     UserPackage @relation(fields: [userPackageId], references: [id])

  @@unique([userPackageId, predictionId])
  @@index([status])
  @@index([expiresAt])
  @@index([userPackageId, status, claimedAt])
  @@index([result, claimedAt])
  @@index([predictionId, status])
}

model TipUsage {
  id               String         @id @default(cuid())
  userPackageTipId String         @unique
  userId           String
  usedAt           DateTime       @default(now())
  stakeAmount      Decimal?
  actualReturn     Decimal?
  notes            String?
  user             User           @relation(fields: [userId], references: [id])
  userPackageTip   UserPackageTip @relation(fields: [userPackageTipId], references: [id])

  @@index([userId])
  @@index([usedAt])
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String
  source      String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model CreditTipClaim {
  id           String     @id @default(cuid())
  userId       String
  predictionId String
  creditsSpent Int        @default(1)
  claimedAt    DateTime   @default(now())
  expiresAt    DateTime?
  status       String     @default("active")
  usedAt       DateTime?
  notes        String?
  prediction   Prediction @relation(fields: [predictionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, predictionId])
  @@index([userId, status])
  @@index([expiresAt])
  @@index([claimedAt])
}

model BlogPost {
  id                 String    @id @default(cuid())
  title              String
  slug               String    @unique
  excerpt            String?
  content            String
  author             String    @default("SnapBet AI Team")
  category           String
  tags               String[]
  geoTarget          String[]  @default(["worldwide"])
  featured           Boolean   @default(false)
  publishedAt        DateTime  @default(now())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  viewCount          Int       @default(0)
  shareCount         Int       @default(0)
  readTime           Int
  seoTitle           String?
  seoDescription     String?
  seoKeywords        String[]
  isPublished        Boolean   @default(true)
  isActive           Boolean   @default(true)
  aiGenerated        Boolean   @default(false)
  scheduledPublishAt DateTime?
  sourceUrl          String?

  @@index([category, isPublished, isActive])
  @@index([geoTarget, isPublished, isActive])
  @@index([featured, isPublished, isActive])
  @@index([publishedAt, isPublished, isActive])
  @@index([viewCount, isPublished, isActive])
  @@index([slug, isPublished, isActive])
  @@index([aiGenerated, isPublished])
  @@index([sourceUrl])
}

model QuizSession {
  id                    String    @id @default(cuid())
  userId                String?
  email                 String?
  fullName              String?
  phone                 String?
  status                String    @default("in_progress") // in_progress, completed, abandoned
  startTime             DateTime  @default(now())
  endTime               DateTime?
  currentQuestionIndex  Int       @default(0)
  totalScore            Int       @default(0)
  answers               Json      @default("[]") // Array of answer objects
  referralCode          String?
  referralId            String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User?     @relation(fields: [userId], references: [id])
  referral              Referral? @relation(fields: [referralId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([referralCode])
  @@index([referralId])
  @@index([createdAt])
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  description String
  category    String   // technical, billing, account, general
  priority    String   // low, medium, high, urgent
  status      String   // open, in_progress, resolved, closed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
  assignedTo  String?  // admin user ID
  tags        String[] // for categorization
  attachments String[] // file URLs
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  responses   SupportTicketResponse[]
  
  // Indexes for performance
  @@index([userId, status])
  @@index([category, priority])
  @@index([assignedTo, status])
}

model SupportTicketResponse {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String
  message   String
  isStaff   Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  
  @@index([ticketId, createdAt])
}

model BreakingNews {
  id        String    @id @default(cuid())
  title     String
  message   String
  priority  Int       @default(1) // 1=Low, 2=Medium, 3=High, 4=Critical
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String
  
  // Relations
  user      User      @relation(fields: [createdBy], references: [id])
  
  @@index([isActive, priority])
  @@index([expiresAt])
  @@index([createdAt])
}

model NewsletterSubscription {
  id           String   @id @default(cuid())
  email        String   @unique
  isActive     Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  
  @@index([email])
  @@index([isActive])
  @@index([subscribedAt])
}
