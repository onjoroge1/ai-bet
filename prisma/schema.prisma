generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id                   String                     @id @default(cuid())
  code                 String                     @unique
  name                 String
  flagEmoji            String?
  currencyCode         String?
  currencySymbol       String?
  brandName            String?
  tagline              String?
  marketContext        String?
  createdAt            DateTime                   @default(now())
  isActive             Boolean                    @default(true)
  updatedAt            DateTime                   @default(now())
  flexibleOptions      FlexibleOption[]
  packageCountryPrices PackageCountryPrice[]
  packageOfferPrices   PackageOfferCountryPrice[]
  paymentMethods       PaymentMethod[]
  platformStats        PlatformStat[]
  pricingPlans         PricingPlan[]
  quickPurchases       QuickPurchase[]
  testimonials         Testimonial[]
  users                User[]
}

model PaymentMethod {
  id        String  @id @default(cuid())
  countryId String
  name      String
  type      String?
  isActive  Boolean @default(true)
  sortOrder Int     @default(0)
  country   Country @relation(fields: [countryId], references: [id])
}

model PricingPlan {
  id            String   @id @default(cuid())
  countryId     String
  planType      String
  name          String
  priceAmount   Decimal
  originalPrice Decimal?
  billingPeriod String
  description   String?
  isPopular     Boolean  @default(false)
  isActive      Boolean  @default(true)
  features      Json?
  createdAt     DateTime @default(now())
  country       Country  @relation(fields: [countryId], references: [id])
}

model FlexibleOption {
  id          String  @id @default(cuid())
  countryId   String
  name        String
  priceAmount Decimal
  description String?
  category    String
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  country     Country @relation(fields: [countryId], references: [id])
}

model QuickPurchase {
  id                 String     @id @default(cuid())
  name               String
  price              Decimal
  originalPrice      Decimal?
  description        String
  features           String[]
  type               String
  iconName           String
  colorGradientFrom  String
  colorGradientTo    String
  isUrgent           Boolean    @default(false)
  timeLeft           String?
  isPopular          Boolean    @default(false)
  discountPercentage Int?
  isActive           Boolean    @default(true)
  displayOrder       Int        @default(0)
  targetLink         String?
  countryId          String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  analysisSummary    String?
  confidenceScore    Int?
  isPredictionActive Boolean    @default(true)
  matchData          Json?
  matchId            String?    @unique
  odds               Decimal?
  predictionData     Json?
  predictionType     String?
  valueRating        String?
  purchases          Purchase[]
  country            Country    @relation(fields: [countryId], references: [id])
}

model League {
  id                      String    @id @default(cuid())
  name                    String    @unique
  countryCode             String?
  sport                   String    @default("football")
  isActive                Boolean   @default(true)
  logoUrl                 String?
  createdAt               DateTime  @default(now())
  dataCollectionPriority  Int       @default(0)
  externalLeagueId        String?
  isDataCollectionEnabled Boolean   @default(true)
  isPredictionEnabled     Boolean   @default(true)
  lastDataSync            DateTime?
  matchLimit              Int       @default(10)
  syncFrequency           String    @default("daily")
  updatedAt               DateTime  @updatedAt
  matches                 Match[]
  teams                   Team[]

  @@index([isDataCollectionEnabled, dataCollectionPriority])
  @@index([externalLeagueId])
}

model Team {
  id          String  @id @default(cuid())
  name        String
  leagueId    String
  logoUrl     String?
  isActive    Boolean @default(true)
  awayMatches Match[] @relation("AwayTeam")
  homeMatches Match[] @relation("HomeTeam")
  league      League  @relation(fields: [leagueId], references: [id])

  @@unique([name, leagueId])
}

model Match {
  id           String       @id @default(cuid())
  homeTeamId   String
  awayTeamId   String
  leagueId     String
  matchDate    DateTime
  status       String       @default("scheduled")
  homeScore    Int?
  awayScore    Int?
  minutePlayed Int?
  createdAt    DateTime     @default(now())
  awayTeam     Team         @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam     Team         @relation("HomeTeam", fields: [homeTeamId], references: [id])
  league       League       @relation(fields: [leagueId], references: [id])
  predictions  Prediction[]
}

model Prediction {
  id                   String           @id @default(cuid())
  matchId              String
  predictionType       String
  confidenceScore      Int              @db.SmallInt
  odds                 Decimal
  valueRating          String
  explanation          String?
  isFree               Boolean          @default(true)
  isFeatured           Boolean          @default(false)
  status               String           @default("pending")
  createdAt            DateTime         @default(now())
  resultUpdatedAt      DateTime?
  matchesInAccumulator Json?
  potentialReturn      Decimal?
  showInDailyTips      Boolean          @default(true)
  showInWeeklySpecials Boolean          @default(false)
  stake                Decimal?
  totalOdds            Decimal?
  type                 String           @default("single")
  match                Match            @relation(fields: [matchId], references: [id])
  userPackageTips      UserPackageTip[]
  userPredictions      UserPrediction[]
  creditTipClaims      CreditTipClaim[]
}

model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  createdAt             DateTime            @default(now())
  password              String
  role                  String              @default("user")
  countryId             String?
  fullName              String?
  isActive              Boolean             @default(true)
  lastLoginAt           DateTime?
  phone                 String?
  subscriptionExpiresAt DateTime?
  subscriptionPlan      String?
  totalWinnings         Decimal             @default(0)
  winStreak             Int                 @default(0)
  referralCode          String?             @unique
  totalReferralEarnings Decimal             @default(0)
  totalReferrals        Int                 @default(0)
  predictionCredits     Int                 @default(0)
  totalCreditsEarned    Int                 @default(0)  // Track total credits earned
  totalCreditsSpent     Int                 @default(0)  // Track total credits spent
  emailNotifications    Boolean             @default(true)
  pushNotifications     Boolean             @default(true)
  inAppNotifications    Boolean             @default(true)
  notificationSettings  Json?               // Detailed notification preferences
  chatMessages          ChatMessage[]
  leaderboardEntries    LeaderboardEntry[]
  PointTransaction      PointTransaction[]
  purchases             Purchase[]
  packagePurchases      PackagePurchase[]
  quizParticipations    QuizParticipation[]
  referralsReceived     Referral[]          @relation("Referred")
  referralsGiven        Referral[]          @relation("Referrer")
  tipUsages             TipUsage[]
  creditTransactions    CreditTransaction[]
  creditTipClaims       CreditTipClaim[]
  country               Country?            @relation(fields: [countryId], references: [id])
  userPackages          UserPackage[]
  userPoints            UserPoints?
  userPredictions       UserPrediction[]
  notifications         UserNotification[]
}

model UserPrediction {
  id              String     @id @default(cuid())
  userId          String
  predictionId    String
  stakeAmount     Decimal
  potentialReturn Decimal
  actualReturn    Decimal?
  status          String
  placedAt        DateTime   @default(now())
  prediction      Prediction @relation(fields: [predictionId], references: [id])
  user            User       @relation(fields: [userId], references: [id])
}

model Referral {
  id                  String             @id @default(cuid())
  referrerId          String
  referredId          String
  referralCode        String
  commissionAmount    Decimal
  status              String             @default("pending")
  createdAt           DateTime           @default(now())
  packageRewardId     String?
  pointsEarned        Int                @default(0)
  quizParticipationId String?
  referralType        String             @default("quiz")
  packageReward       PackageOffer?      @relation(fields: [packageRewardId], references: [id])
  quizParticipation   QuizParticipation? @relation(fields: [quizParticipationId], references: [id])
  referred            User               @relation("Referred", fields: [referredId], references: [id])
  referrer            User               @relation("Referrer", fields: [referrerId], references: [id])

  @@index([referrerId, status])
  @@index([referralType])
  @@index([createdAt])
}

model QuizParticipation {
  id                String       @id @default(cuid())
  userId            String?
  email             String
  phone             String?
  fullName          String
  bettingExperience String
  totalScore        Int          @default(0)
  questionsAnswered Int          @default(0)
  correctAnswers    Int          @default(0)
  referralCode      String?
  participatedAt    DateTime     @default(now())
  isCompleted       Boolean      @default(false)
  countryCode       String?
  ipAddress         String?
  userAgent         String?
  bonusPoints       Int          @default(0)
  creditsClaimed    Boolean      @default(false)
  quizReferralCode  String?
  referralBonus     Int          @default(0)
  quizAnswers       QuizAnswer[]
  user              User?        @relation(fields: [userId], references: [id])
  referrals         Referral[]

  @@index([email])
  @@index([referralCode])
  @@index([quizReferralCode])
  @@index([participatedAt])
  @@index([bettingExperience])
  @@index([creditsClaimed])
}

model QuizQuestion {
  id            String       @id @default(cuid())
  question      String
  correctAnswer String
  options       String[]
  category      String
  difficulty    String       @default("medium")
  points        Int          @default(10)
  isActive      Boolean      @default(true)
  weekNumber    Int?
  createdAt     DateTime     @default(now())
  quizAnswers   QuizAnswer[]

  @@index([category])
  @@index([weekNumber])
  @@index([isActive])
}

model QuizAnswer {
  id                  String            @id @default(cuid())
  quizParticipationId String
  quizQuestionId      String
  selectedAnswer      String
  isCorrect           Boolean
  pointsEarned        Int               @default(0)
  answeredAt          DateTime          @default(now())
  quizParticipation   QuizParticipation @relation(fields: [quizParticipationId], references: [id])
  quizQuestion        QuizQuestion      @relation(fields: [quizQuestionId], references: [id])

  @@unique([quizParticipationId, quizQuestionId])
  @@index([isCorrect])
}

model UserPoints {
  id                String             @id @default(cuid())
  userId            String             @unique
  points            Int                @default(0)
  totalEarned       Int                @default(0)
  totalSpent        Int                @default(0)
  lastUpdated       DateTime           @default(now())
  pointTransactions PointTransaction[]
  user              User               @relation(fields: [userId], references: [id])

  @@index([points])
}

model PointTransaction {
  id           String     @id @default(cuid())
  userPointsId String
  amount       Int
  type         String
  description  String
  createdAt    DateTime   @default(now())
  metadata     Json?
  reference    String?
  userId       String
  User         User       @relation(fields: [userId], references: [id])
  userPoints   UserPoints @relation(fields: [userPointsId], references: [id])

  @@index([type])
  @@index([createdAt])
  @@index([userId])
}

model ReferralReward {
  id             String        @id @default(cuid())
  name           String
  description    String
  type           String
  value          Int
  packageOfferId String?
  minReferrals   Int           @default(1)
  maxReferrals   Int?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  packageOffer   PackageOffer? @relation(fields: [packageOfferId], references: [id])

  @@index([type])
  @@index([isActive])
}

model WeeklyLeaderboard {
  id                 String             @id @default(cuid())
  weekNumber         Int
  year               Int
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  leaderboardEntries LeaderboardEntry[]

  @@unique([weekNumber, year])
  @@index([isActive])
}

model LeaderboardEntry {
  id                  String            @id @default(cuid())
  weeklyLeaderboardId String
  userId              String
  totalPoints         Int               @default(0)
  quizScore           Int               @default(0)
  referralPoints      Int               @default(0)
  rank                Int?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [userId], references: [id])
  weeklyLeaderboard   WeeklyLeaderboard @relation(fields: [weeklyLeaderboardId], references: [id])

  @@unique([weeklyLeaderboardId, userId])
  @@index([totalPoints])
  @@index([rank])
}

model PlatformStat {
  id                    String   @id @default(cuid())
  statDate              DateTime
  countryId             String
  totalUsers            Int      @default(0)
  activeUsers           Int      @default(0)
  vipUsers              Int      @default(0)
  totalPredictions      Int      @default(0)
  successfulPredictions Int      @default(0)
  revenueAmount         Decimal  @default(0)
  createdAt             DateTime @default(now())
  country               Country  @relation(fields: [countryId], references: [id])
}

model Testimonial {
  id              String   @id @default(cuid())
  userName        String
  countryId       String
  rating          Int      @db.SmallInt
  testimonialText String
  profitAmount    String
  timeframe       String
  isFeatured      Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  country         Country  @relation(fields: [countryId], references: [id])
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isVipUser Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserNotification {
  id              String    @id @default(cuid())
  userId          String
  title           String
  message         String
  type            String    // 'info', 'success', 'warning', 'error', 'prediction', 'payment', 'achievement'
  category        String    // 'system', 'prediction', 'payment', 'achievement', 'marketing'
  isRead          Boolean   @default(false)
  isEmailSent     Boolean   @default(false)
  isPushSent      Boolean   @default(false)
  metadata        Json?     // Additional data like predictionId, matchId, etc.
  actionUrl       String?   // URL to navigate to when clicked
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  readAt          DateTime?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, type])
  @@index([userId, category])
  @@index([createdAt])
  @@index([expiresAt])
}

model NotificationTemplate {
  id              String   @id @default(cuid())
  name            String   @unique
  title           String
  message         String
  type            String   // 'info', 'success', 'warning', 'error', 'prediction', 'payment', 'achievement'
  category        String   // 'system', 'prediction', 'payment', 'achievement', 'marketing'
  isActive        Boolean  @default(true)
  variables       String[] // Template variables like {{userName}}, {{predictionType}}, etc.
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SystemHealth {
  id                String   @id @default(cuid())
  serverStatus      String
  apiResponseTime   Int
  databaseStatus    String
  errorRate         Float
  activeConnections Int
  cpuUsage          Float
  memoryUsage       Float
  diskUsage         Float
  lastCheckedAt     DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PackageCountryPrice {
  id            String  @id @default(cuid())
  countryId     String
  packageType   String
  price         Decimal
  originalPrice Decimal?
  country       Country @relation(fields: [countryId], references: [id])

  @@unique([countryId, packageType])
}

model Purchase {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  userId          String
  amount          Decimal
  paymentMethod   String
  status          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  quickPurchaseId String
  quickPurchase   QuickPurchase @relation(fields: [quickPurchaseId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([quickPurchaseId])
}

model PackagePurchase {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  userId          String
  amount          Decimal
  paymentMethod   String
  status          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  packageOfferId  String?       // For PackageOffer-based purchases
  packageType     String        // For PackageCountryPrice-based purchases (e.g., "weekly_pass")
  countryId       String?       // For PackageCountryPrice-based purchases
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([packageOfferId])
  @@index([packageType, countryId])
}

model PackageOffer {
  id                String                     @id @default(cuid())
  name              String
  packageType       String
  description       String
  tipCount          Int
  validityDays      Int
  isActive          Boolean                    @default(true)
  displayOrder      Int                        @default(0)
  features          String[]
  iconName          String                     @default("Gift")
  colorGradientFrom String                     @default("#8B5CF6")
  colorGradientTo   String                     @default("#EC4899")
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  countryPrices     PackageOfferCountryPrice[]
  referrals         Referral[]
  referralRewards   ReferralReward[]
  userPackages      UserPackage[]
}

model PackageOfferCountryPrice {
  id             String       @id @default(cuid())
  packageOfferId String
  countryId      String
  price          Decimal
  originalPrice  Decimal?
  currencyCode   String
  currencySymbol String
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  country        Country      @relation(fields: [countryId], references: [id])
  packageOffer   PackageOffer @relation(fields: [packageOfferId], references: [id])

  @@unique([packageOfferId, countryId])
}

model UserPackage {
  id             String           @id @default(cuid())
  userId         String
  packageOfferId String
  purchasedAt    DateTime         @default(now())
  expiresAt      DateTime
  tipsRemaining  Int
  totalTips      Int
  status         String           @default("active")
  pricePaid      Decimal
  currencyCode   String
  currencySymbol String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  packageOffer   PackageOffer     @relation(fields: [packageOfferId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  claimedTips    UserPackageTip[]

  @@index([userId, status])
  @@index([expiresAt])
}

model UserPackageTip {
  id            String      @id @default(cuid())
  userPackageId String
  predictionId  String
  claimedAt     DateTime    @default(now())
  expiresAt     DateTime?
  notes         String?
  status        String      @default("claimed")
  usedAt        DateTime?
  tipUsage      TipUsage?
  prediction    Prediction  @relation(fields: [predictionId], references: [id])
  userPackage   UserPackage @relation(fields: [userPackageId], references: [id])

  @@unique([userPackageId, predictionId])
  @@index([status])
  @@index([expiresAt])
}

model TipUsage {
  id               String         @id @default(cuid())
  userPackageTipId String         @unique
  userId           String
  usedAt           DateTime       @default(now())
  stakeAmount      Decimal?
  actualReturn     Decimal?
  notes            String?
  user             User           @relation(fields: [userId], references: [id])
  userPackageTip   UserPackageTip @relation(fields: [userPackageTipId], references: [id])

  @@index([userId])
  @@index([usedAt])
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      // Positive for earned, negative for spent
  type        String   // 'earned', 'spent', 'refunded', 'expired'
  source      String   // 'package_purchase', 'tip_claim', 'refund', 'expiration'
  description String
  metadata    Json?    // Additional data like packageId, predictionId, etc.
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model CreditTipClaim {
  id           String     @id @default(cuid())
  userId       String
  predictionId String
  creditsSpent Int        @default(1)
  claimedAt    DateTime   @default(now())
  expiresAt    DateTime?  // When the tip expires
  status       String     @default("active") // 'active', 'used', 'expired', 'refunded'
  usedAt       DateTime?  // When the tip was actually used
  notes        String?
  user         User       @relation(fields: [userId], references: [id])
  prediction   Prediction @relation(fields: [predictionId], references: [id])

  @@unique([userId, predictionId]) // Prevent duplicate claims
  @@index([userId, status])
  @@index([expiresAt])
  @@index([claimedAt])
}
