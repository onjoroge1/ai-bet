import prisma from '../lib/db'

async function testContentGenerationWorkflow() {
  console.log('üß™ Testing Content Generation Workflow...\n')

  try {
    // Test 1: Simulate RSS feed processing
    console.log('üì∞ Test 1: Simulating RSS feed processing...')
    
    const mockRSSItems = [
      {
        title: 'Transfer News: Haaland Set for Real Madrid Move',
        description: 'Manchester City striker Erling Haaland is reportedly considering a move to Real Madrid this summer, with betting markets already reacting to the news.',
        link: 'https://bbc.com/sport/football/transfer-news-123',
        pubDate: new Date(),
        source: 'BBC Sport',
        category: 'transfer',
        keywords: ['transfer', 'haaland', 'real madrid', 'betting']
      },
      {
        title: 'Premier League: Arsenal vs Chelsea Match Preview',
        description: 'Arsenal host Chelsea in a crucial Premier League clash with significant betting implications and title race consequences.',
        link: 'https://skysports.com/football/arsenal-chelsea-preview',
        pubDate: new Date(),
        source: 'Sky Sports',
        category: 'match',
        keywords: ['arsenal', 'chelsea', 'premier league', 'match', 'betting']
      },
      {
        title: 'Injury Update: Key Player Ruled Out for Season',
        description: 'A major injury blow for title contenders as star midfielder is confirmed to miss the remainder of the season.',
        link: 'https://espn.com/soccer/injury-update-456',
        pubDate: new Date(),
        source: 'ESPN',
        category: 'injury',
        keywords: ['injury', 'season', 'midfielder', 'title race']
      }
    ]

    console.log(`   Created ${mockRSSItems.length} mock RSS items`)
    mockRSSItems.forEach((item, index) => {
      console.log(`   ${index + 1}. ${item.title}`)
      console.log(`      Source: ${item.source}, Category: ${item.category}`)
    })

    // Test 2: Test content categorization
    console.log('\nüéØ Test 2: Testing content categorization...')
    
    function categorizeContent(title: string, description: string): string {
      const content = (title + ' ' + description).toLowerCase()
      
      if (content.includes('transfer')) return 'transferNews'
      if (content.includes('match') || content.includes('vs') || content.includes('preview')) return 'matchAnalysis'
      if (content.includes('injury')) return 'matchAnalysis' // Injuries affect matches
      if (content.includes('league') || content.includes('standings')) return 'leagueAnalysis'
      if (content.includes('odds') || content.includes('betting')) return 'bettingTrends'
      
      return 'general'
    }

    mockRSSItems.forEach((item, index) => {
      const category = categorizeContent(item.title, item.description)
      console.log(`   ${index + 1}. "${item.title}" ‚Üí ${category}`)
    })

    // Test 3: Test relevance scoring
    console.log('\nüìä Test 3: Testing relevance scoring...')
    
    function calculateRelevanceScore(item: any): number {
      let score = 0
      const title = item.title.toLowerCase()
      const description = item.description.toLowerCase()

      // High-priority keywords
      const highPriorityKeywords = ['transfer', 'injury', 'match', 'prediction']
      highPriorityKeywords.forEach(keyword => {
        if (title.includes(keyword)) score += 20
        if (description.includes(keyword)) score += 10
      })

      // Medium-priority keywords
      const mediumPriorityKeywords = ['betting', 'odds', 'analysis', 'preview']
      mediumPriorityKeywords.forEach(keyword => {
        if (title.includes(keyword)) score += 15
        if (description.includes(keyword)) score += 8
      })

      // Source priority
      const highPrioritySources = ['bbc', 'sky sports', 'espn']
      if (highPrioritySources.some(source => item.source.toLowerCase().includes(source))) {
        score += 10
      }

      // Recency bonus (items from last 24 hours get bonus)
      const hoursSincePublished = (Date.now() - new Date(item.pubDate).getTime()) / (1000 * 60 * 60)
      if (hoursSincePublished <= 24) {
        score += 10
      }

      return Math.min(score, 100)
    }

    mockRSSItems.forEach((item, index) => {
      const score = calculateRelevanceScore(item)
      const isRelevant = score >= 70
      console.log(`   ${index + 1}. "${item.title}" ‚Üí Score: ${score} (${isRelevant ? '‚úÖ Relevant' : '‚ùå Not Relevant'})`)
    })

    // Test 4: Test content generation simulation
    console.log('\nü§ñ Test 4: Simulating content generation...')
    
    const relevantItems = mockRSSItems.filter(item => calculateRelevanceScore(item) >= 70)
    console.log(`   Found ${relevantItems.length} relevant items out of ${mockRSSItems.length} total`)

    if (relevantItems.length > 0) {
      console.log('   Simulating content generation for relevant items:')
      
      for (const item of relevantItems.slice(0, 2)) { // Limit to 2 for testing
        const category = categorizeContent(item.title, item.description)
        const score = calculateRelevanceScore(item)
        
        console.log(`\n   üìù Generating content for: "${item.title}"`)
        console.log(`      Category: ${category}`)
        console.log(`      Relevance Score: ${score}`)
        console.log(`      Source: ${item.source}`)
        
        // Simulate content generation
        const generatedContent = {
          title: `AI Analysis: ${item.title}`,
          excerpt: `Our AI analysis of the latest ${category} news: ${item.description.substring(0, 100)}...`,
          content: `<p>This is a simulated AI-generated blog post about "${item.title}".</p><p>The content would include detailed analysis, betting implications, and AI insights based on the original news source.</p><p>This demonstrates how our automation system would process RSS feeds and generate engaging blog content.</p>`,
          keywords: item.keywords,
          readTime: Math.ceil(item.description.length / 200), // Rough estimate
          seoTitle: `AI Analysis: ${item.title} - SnapBet AI`,
          seoDescription: `Get AI-powered analysis of ${item.title}. Expert insights and betting implications from SnapBet AI.`,
          seoKeywords: [...item.keywords, 'ai analysis', 'betting tips', 'snapbet']
        }
        
        console.log(`      Generated Title: ${generatedContent.title}`)
        console.log(`      Read Time: ${generatedContent.readTime} minutes`)
        console.log(`      SEO Title: ${generatedContent.seoTitle}`)
      }
    }

    // Test 5: Test database integration
    console.log('\nüíæ Test 5: Testing database integration...')
    
    if (relevantItems.length > 0) {
      const testItem = relevantItems[0]
      const category = categorizeContent(testItem.title, testItem.description)
      
      try {
        const testBlogPost = await prisma.blogPost.create({
          data: {
            title: `AI Analysis: ${testItem.title}`,
            slug: `ai-analysis-${testItem.title.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`,
            excerpt: `Our AI analysis of the latest ${category} news: ${testItem.description.substring(0, 150)}...`,
            content: `<p>This is a simulated AI-generated blog post about "${testItem.title}".</p><p>The content would include detailed analysis, betting implications, and AI insights based on the original news source from ${testItem.source}.</p><p>This demonstrates how our automation system would process RSS feeds and generate engaging blog content for SnapBet AI users.</p>`,
            author: 'SnapBet AI Team',
            category,
            tags: testItem.keywords,
            geoTarget: ['worldwide'],
            featured: false,
            readTime: Math.ceil(testItem.description.length / 200),
            seoTitle: `AI Analysis: ${testItem.title} - SnapBet AI`,
            seoDescription: `Get AI-powered analysis of ${testItem.title}. Expert insights and betting implications from SnapBet AI.`,
            seoKeywords: [...testItem.keywords, 'ai analysis', 'betting tips', 'snapbet'],
            isPublished: false,
            aiGenerated: true,
            sourceUrl: testItem.link
          }
        })

        console.log(`‚úÖ Test blog post created successfully!`)
        console.log(`   ID: ${testBlogPost.id}`)
        console.log(`   Title: ${testBlogPost.title}`)
        console.log(`   Category: ${testBlogPost.category}`)
        console.log(`   AI Generated: ${testBlogPost.aiGenerated}`)
        console.log(`   Source URL: ${testBlogPost.sourceUrl}`)

        // Clean up
        await prisma.blogPost.delete({
          where: { id: testBlogPost.id }
        })
        console.log(`‚úÖ Test blog post cleaned up`)

      } catch (error) {
        console.log(`‚ùå Database integration test failed: ${error}`)
      }
    }

    // Test 6: Test daily limits
    console.log('\nüìÖ Test 6: Testing daily limits...')
    
    const dailyLimit = 3
    const relevantCount = relevantItems.length
    const itemsToProcess = Math.min(relevantCount, dailyLimit)
    
    console.log(`   Daily limit: ${dailyLimit} articles`)
    console.log(`   Relevant items found: ${relevantCount}`)
    console.log(`   Items to process today: ${itemsToProcess}`)
    
    if (itemsToProcess > 0) {
      console.log('   Items selected for processing:')
      relevantItems.slice(0, itemsToProcess).forEach((item, index) => {
        const score = calculateRelevanceScore(item)
        console.log(`   ${index + 1}. "${item.title}" (Score: ${score})`)
      })
    }

    console.log('\n‚úÖ Content generation workflow tests completed successfully!')
    console.log('\nüìã Summary:')
    console.log('   ‚úÖ RSS feed processing simulation working')
    console.log('   ‚úÖ Content categorization logic functional')
    console.log('   ‚úÖ Relevance scoring algorithm working')
    console.log('   ‚úÖ Content generation simulation ready')
    console.log('   ‚úÖ Database integration verified')
    console.log('   ‚úÖ Daily limits and selection logic working')

  } catch (error) {
    console.error('‚ùå Test failed:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Run the test
testContentGenerationWorkflow().catch(console.error) 